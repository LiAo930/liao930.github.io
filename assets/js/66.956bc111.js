(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{266:function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[t._v("#")]),t._v(" Router:")]),t._v(" "),r("p",[t._v("​\t改变路由，跳转页面，除了先前说过的router-link可以做到，我们也能用路由对象router的push方法(this.$router.push)完成，可分以下几种情况：")]),t._v(" "),r("p",[t._v("​\trouter.push({name , params}):路由表中需设置name属性；")]),t._v(" "),r("p",[t._v("​\trouter.push(path);")]),t._v(" "),r("p",[t._v("​\trouter.push({path}):path属性设置后，params属性就无意义，即便设置也只显示path；")]),t._v(" "),r("p",[t._v("​\trouter.push({path , query}):query为路径中‘？’后的参数；")]),t._v(" "),r("p",[t._v("例：")]),t._v(" "),r("h4",{attrs:{id:"app-vue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#app-vue"}},[t._v("#")]),t._v(" App.vue")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<template>\n  <div id="app">\n    <h1>nestedDemo</h1>\n    \x3c!-- <router-link to="/user/user1">Go to user1</router-link>\n    <router-link to="/user/user2">Go to user2</router-link>\n    <router-link to="/user/user2/foo">Go to user2-foo</router-link>\n    <router-link to="/user/user2/bar">Go to user2-bar</router-link> --\x3e\n    <button @click="goUser">go to user1</button>\n    <router-view></router-view>\n  </div>\n</template>\n<script>\nexport default {\n  name: "app",\n  data: function() {\n    return {\n      toMsg: "",\n      frommsg: ""\n    };\n  },\n  computed: {\n    path: function() {\n      return this.$route;\n    }\n  },\n  methods: {\n    goUser: function() {\n      this.$router.push({\n        name: "user"\n        // params: {\n        //   userName\n        // }\n        // path: `/user/${userName}`\n      });\n    }\n  }\n};\n<\/script>\n')])])]),r("h4",{attrs:{id:"routes-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#routes-js"}},[t._v("#")]),t._v(" routes.js:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('const routes = [\n  {\n    path: "/user",\n    name: "user",\n    component: userDemo\n  },\n  {\n    path: "/user/:id",\n    component: user,\n    children: [\n      {\n        path: "foo",\n        component: foo\n      },\n      {\n        path: "bar",\n        component: bar\n      }\n    ]\n  },\n  { path: "/demo1", component: demo1 },\n  { path: "/demo2", component: demo2 }\n];\n')])])]),r("h4",{attrs:{id:"注意，push方法虽然能改换路径，但本质是向history记录栈增添数据，可以通过后退来翻看之前的页面。但如果使用replace方法则没有这个问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意，push方法虽然能改换路径，但本质是向history记录栈增添数据，可以通过后退来翻看之前的页面。但如果使用replace方法则没有这个问题"}},[t._v("#")]),t._v(" 注意，push方法虽然能改换路径，但本质是向history记录栈增添数据，可以通过后退来翻看之前的页面。但如果使用replace方法则没有这个问题")]),t._v(" "),r("p",[t._v("router.go(n):在history中前进或后退多少步。n大于0则前进，否则后退")])])}),[],!1,null,null,null);e.default=s.exports}}]);